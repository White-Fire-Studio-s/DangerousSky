--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, shadowing, incorrect_standard_library_use)
-- Client generated by Zap v0.6.3 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

load_empty()

local types = {}
if RunService:IsServer() then
	error("Cannot use the client module on the server!")
end

local reliable = ReplicatedStorage:WaitForChild("ZAP_RELIABLE")
local unreliable = ReplicatedStorage:WaitForChild("ZAP_UNRELIABLE")

assert(reliable:IsA("RemoteEvent"), "Expected ZAP_RELIABLE to be a RemoteEvent")
assert(unreliable:IsA("UnreliableRemoteEvent"), "Expected ZAP_UNRELIABLE to be an UnreliableRemoteEvent")

local time = 0

RunService.Heartbeat:Connect(function(dt)
	time += dt

	if time >= (1 / 61) then
		time -= (1 / 61)

		if outgoing_used ~= 0 then
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)

			reliable:FireServer(buff, outgoing_inst)

			outgoing_buff = buffer.create(64)
			outgoing_used = 0
			outgoing_size = 64
			table.clear(outgoing_inst)
		end
	end
end)

local events = table.create(8)
local event_queue: { [number]: { any } } = table.create(8)
local function_call_id = 0
events[1] = {}
event_queue[1] = {}
event_queue[4] = {}
event_queue[8] = table.create(255)
reliable.OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 1 then
			local value
			value = {}
			value.id = buffer.readu8(incoming_buff, read(1))
			assert(value.id >= 2)
			assert(value.id <= 10)
			local len = buffer.readu16(incoming_buff, read(2))
			assert(len >= 3)
			assert(len <= 20)
			value.name = buffer.readstring(incoming_buff, read(len), len)
			if events[1][1] then
				for _, cb in events[1] do
					task.spawn(cb, value)
				end
			else
				table.insert(event_queue[1], value)
				if #event_queue[1] > 64 then
					warn(`[ZAP] {#event_queue[1]} events in queue for Teste. Did you forget to attach a listener?`)
				end
			end
		elseif id == 8 then
			local call_id = buffer.readu8(incoming_buff, read(1))
			local value
			value = {}
			local enum_value = buffer.readu8(incoming_buff, read(1))
			if enum_value == 0 then
				value = "Sucess"
			elseif enum_value == 1 then
				value = "Invalid"
			elseif enum_value == 2 then
				value = "Expired"
			elseif enum_value == 3 then
				value = "Used"
			else
				error("Invalid enumerator")
			end
			task.spawn(event_queue[8][call_id], value)
			event_queue[8][call_id] = nil
		else
			error("Unknown event id")
		end
	end
end)
unreliable.OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local id = buffer.readu8(buff, read(1))
	if id == 4 then
		local value
		value = {}
		local len = buffer.readu16(incoming_buff, read(2))
		assert(len <= 50)
		value.Text = buffer.readstring(incoming_buff, read(len), len)
		local len = buffer.readu16(incoming_buff, read(2))
		assert(len <= 20)
		value.Font = buffer.readstring(incoming_buff, read(len), len)
		local len = buffer.readu16(incoming_buff, read(2))
		assert(len <= 6)
		value.Color = buffer.readstring(incoming_buff, read(len), len)
		local len = buffer.readu16(incoming_buff, read(2))
		assert(len <= 2)
		value.FontSize = buffer.readstring(incoming_buff, read(len), len)
		if events[4] then
			task.spawn(events[4], value)
		else
			table.insert(event_queue[4], value)
			if #event_queue[4] > 64 then
				warn(`[ZAP] {#event_queue[4]} events in queue for DisplayMessage. Did you forget to attach a listener?`)
			end
		end
	else
		error("Unknown event id")
	end
end)
return {
	CollectOrb = {
		fire = function(value: ({
			orb: (Model),
			lifetime: (number),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			assert(value.orb:IsA("Model"))
			table.insert(outgoing_inst, value.orb)
			assert(value.lifetime <= 500)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, value.lifetime)
		end,
	},
	StorePurchase = {
		fire = function(value: ({
			itemName: (string),
			type: (string),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			local len = #value.itemName
			assert(len >= 1)
			assert(len <= 20)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len)
			alloc(len)
			buffer.writestring(outgoing_buff, outgoing_apos, value.itemName, len)
			local len = #value.type
			assert(len >= 1)
			assert(len <= 20)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len)
			alloc(len)
			buffer.writestring(outgoing_buff, outgoing_apos, value.type, len)
		end,
	},
	UnequipTools = {
		fire = function(value: ({
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
		end,
	},
	JoinServer = {
		fire = function(value: (string))
			local saved = save()
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 6)
			local len = #value
			assert(len <= 5)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len)
			alloc(len)
			buffer.writestring(outgoing_buff, outgoing_apos, value, len)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireServer(buff, outgoing_inst)
			load(saved)
		end,
	},
	CreateCode = {
		fire = function(value: ({
			rewards: ({
				gems: (number),
			}),
			expiresAt: (number),
			code: (string),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 7)
			assert(value.rewards.gems >= 0)
			alloc(8)
			buffer.writef64(outgoing_buff, outgoing_apos, value.rewards.gems)
			assert(value.expiresAt >= 0)
			alloc(8)
			buffer.writef64(outgoing_buff, outgoing_apos, value.expiresAt)
			local len = #value.code
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len)
			alloc(len)
			buffer.writestring(outgoing_buff, outgoing_apos, value.code, len)
		end,
	},
	Teste = {
		on = function(callback: (({
			id: (number),
			name: (string),
		})) -> ())
			table.insert(events[1], callback)
			for _, value in event_queue[1] do
				task.spawn(callback, value)
			end
			event_queue[1] = {}
			return function()
				table.remove(events[1], table.find(events[1], callback))
			end
		end,
	},
	DisplayMessage = {
		setCallback = function(callback: (({
			Text: (string),
			Font: (string),
			Color: (string),
			FontSize: (string),
		})) -> ()): () -> ()
			events[4] = callback
			for _, value in event_queue[4] do
				task.spawn(callback, value)
			end
			event_queue[4] = {}
			return function()
				events[4] = nil
			end
		end,
	},
	ReedemCode = {
		call = function(value: (string))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 8)
			function_call_id += 1
			function_call_id %= 256
			if event_queue[8][function_call_id] then
				function_call_id -= 1
				error("Zap has more than 256 calls awaiting a response, and therefore this packet has been dropped")
			end
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, function_call_id)
			local len = #value
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len)
			alloc(len)
			buffer.writestring(outgoing_buff, outgoing_apos, value, len)
			event_queue[8][function_call_id] = coroutine.running()
			local value = coroutine.yield()
			return value
		end,
	},
}
